@page "/SpectateGame"
@using HttpClients.ClientInterfaces
@using Domain.DTOs.GameRoom
@inject IGameService GameService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-10">
    <div class="d-flex justify-end">
        <MudIconButton Icon="@Icons.Filled.Refresh"
                       @onclick="@(async () => { Snackbar.Add("Refreshed", Severity.Success); await RefreshSpectateableGamesAsync(); })"/>
    </div>
    <SpectateableGameListComponent SpectateableGames="@_spectateableGames"/>
</MudContainer>

@code {
    private IList<GameRoomDto>? _spectateableGames = new List<GameRoomDto>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshSpectateableGamesAsync();
    }

    private async Task RefreshSpectateableGamesAsync()
    {
        try
        {
            _spectateableGames = await GameService.GetGameRoomsAsync(new GameRoomSearchParameters()
            {
                Spectateable = true
            });
        }
        catch (HttpRequestException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
    }
}