@page "/SpectateGame"
@using HttpClients.ClientInterfaces
@using Domain.DTOs.Chat
@using Domain.DTOs
@inject IGameService GameService
@inject ISnackbar Snackbar

<MudContainer Class="mt-10">
    <MudContainer Class="d-flex justify-end">
        <MudIconButton Icon="@Icons.Filled.Refresh"
                       @onclick="@(async () => { await RefreshSpectateableGames(); })"/>
    </MudContainer>
    <SpectateableGameListComponent SpectateableGames="@_spectateableGames"/>
</MudContainer>

@code {
    private IList<GameRoomDto>? _spectateableGames = new List<GameRoomDto>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshSpectateableGames();
    }

    private async Task RefreshSpectateableGames()
    {
        try
        {
            _spectateableGames = await GameService.GetGameRooms(new GameRoomSearchParameters()
            {
                Spectateable = true
            });
            Snackbar.Add("Refreshed", Severity.Success);
        }
        catch(HttpRequestException e)
        {
            Snackbar.Add("Network error. Unable to refresh games.", Severity.Error);
        }
        
    }
}