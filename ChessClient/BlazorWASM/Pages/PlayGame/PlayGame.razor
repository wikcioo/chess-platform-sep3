@page "/"
@using BlazorWASM.Pages.StartGame
@using Domain.DTOs
@using Domain.DTOs.Chat
@using HttpClients.ClientInterfaces
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavMgr
@inject IGameService GameService
<AuthorizeView>
    <Authorized>
        <MudContainer>
            <MudContainer Class="mt-10 d-flex flex-row gap-10">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="DisplayCreateGameDialog">Create a Game</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="JoinRandomGame">Play Random</MudButton>
            </MudContainer>
            <MudSpacer/>
            <MudContainer Class="d-flex justify-end">
                <MudIconButton Icon="@Icons.Filled.Refresh"
                               @onclick="@(async () => { Snackbar.Add("Refreshed", Severity.Success); await RefreshJoinableGames(); })"/>
            </MudContainer>
            <JoinableGameListComponent JoinableGames="@_joinableGames"/>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h2" Align="Align.Center" Class="ma-5">Please login to start playing.</MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IList<GameRoomDto>? _joinableGames = new List<GameRoomDto>();

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        var user = authState.User;
        if (user.Identity == null) return;
        await RefreshJoinableGames();
    }

    private async Task RefreshJoinableGames()
    {
        try
        {
            _joinableGames = await GameService.GetGameRooms(new GameRoomSearchParameters
            {
                Joinable = true
            });
        }
        catch (HttpRequestException e)
        {
            Snackbar.Add("Network error. Unable to refresh games.", Severity.Error);
        }
        
    }

    private void DisplayCreateGameDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            CloseButton = true,
            MaxWidth = MaxWidth.Medium
        };
        DialogService.Show<StartGameComponent>("", options);
    }

    private async void JoinRandomGame()
    {
        await RefreshJoinableGames();
        
        if (_joinableGames?.Count > 0)
        {
            var randomGameRoomId = _joinableGames[new Random().Next(_joinableGames.Count)].GameRoom;
            await GameService.JoinGame(new RequestJoinGameDto
            {
                GameRoom = randomGameRoomId
            });
            NavMgr.NavigateTo("/ChessGame");
        }
        else
        {
            Snackbar.Add("No active games to join!", Severity.Normal, config =>
            {
                config.Action = "Create a game";
                config.ActionColor = Color.Primary;
                config.Onclick = _ =>
                {
                    DisplayCreateGameDialog();
                    return Task.CompletedTask;
                };
            });
        }
    }

}