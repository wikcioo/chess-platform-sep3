@page "/PlayGame"
@using BlazorWASM.Pages.StartGame
@using Application.LogicInterfaces
@using Domain.DTOs
@using Domain.DTOs.GameRoomData
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavMgr
@inject IGameLogic GameLogic

<MudContainer>
    <MudContainer Class="mt-10" Style="display: flex; flex-direction: row; gap: 25px">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="DisplayCreateGameDialog">Create a Game</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="JoinRandomGame">Play Random</MudButton>
    </MudContainer>
    <MudSpacer/>
    <MudContainer Style="display: flex; justify-content: right">
        <MudIconButton Icon="@Icons.Filled.Refresh" @onclick="RefreshJoinableGames"></MudIconButton>
    </MudContainer>
    <JoinableGameListComponent JoinableGames="@_joinableGames"/>
</MudContainer>

@code {
    private IList<JoinableGameRoomDataDto>? _joinableGames;

    protected override async Task OnInitializedAsync()
    {
        _joinableGames = await GameLogic.GetAllJoinableGames();
    }

    private async Task RefreshJoinableGames()
    {
        _joinableGames = await GameLogic.GetAllJoinableGames();
        Snackbar.Add("Refreshed", Severity.Success);
    }

    private void DisplayCreateGameDialog()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            CloseButton = true,
            MaxWidth = MaxWidth.Medium
        };
        DialogService.Show<StartGameComponent>("", options);
    }

    private async void JoinRandomGame()
    {
        await RefreshJoinableGames();
        
        if (_joinableGames.Count > 0)
        {
            NavMgr.NavigateTo("/ChessGame");
            var randomGameRoomId = _joinableGames[new Random().Next(_joinableGames.Count)].GameRoom;
            GameLogic.JoinGame(new RequestJoinGameDto
            {
                GameRoom = randomGameRoomId
            });
        }
        else
        {
            Snackbar.Add("No active games to join!", Severity.Normal, config =>
            {
                config.Action = "Create a game";
                config.ActionColor = Color.Primary;
                config.Onclick = _ =>
                {
                    DisplayCreateGameDialog();
                    return Task.CompletedTask;
                };
            });
        }
    }
}