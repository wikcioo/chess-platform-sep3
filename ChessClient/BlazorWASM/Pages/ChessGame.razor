@page "/ChessGame"
@using BlazorWASM.Pages.ChessComponents
@using Grpc.Net.Client
@using GrpcService
@using HttpClients.ClientInterfaces
@using HttpClients.Implementations
@using Rudzoft.ChessLib
@using Rudzoft.ChessLib.Enums
@using Rudzoft.ChessLib.Fen
@using Rudzoft.ChessLib.Types
@using Game = GrpcService.Game
@inject GrpcChannel Channel

<h3 style="margin: 10px auto; text-align: center">ChessGame</h3>

<div class="chess-board">
    <ul style="list-style-type: none; list-style-image: none">
        <li>
            <TimerComponent Active="@(_isWhiteSide ? !_whiteTimerActive : _whiteTimerActive)" Seconds="@(_isWhiteSide ? _blackSeconds : _whiteSeconds)"/>
        </li>
        <li style="margin: 10px 50px">
            <ChessBoardComponent OnMoveMade="MakeMove" Position="@_position" IsWhiteSide="@_isWhiteSide"/>
        </li>
        <li>
            <TimerComponent Active="@(_isWhiteSide ? _whiteTimerActive : !_whiteTimerActive)" Seconds="@(_isWhiteSide ? _whiteSeconds : _blackSeconds)"/>
        </li>
        <li style="float: left">
            <div class="stockfish-levels">
                <label for="stockfish_levels">Choose a Stockfish Level:</label>
                <select id="stockfish_levels" class="stockfish-levels" @bind="@_selectedLevel">
                    @foreach (var level in _levels)
                    {
                        <option value=@level.Key>Level: @level.Key, Skill: @level.Value.Item1/20, Depth: @level.Value.Item2, @level.Value.Item3 ms</option>
                    }
                </select>
            </div>
            <button style="margin: 20px" disabled="@(_stockfishActivated)" @onclick="PlayStockfish">Play</button>
            <div>
                <input type="radio" name="play-side" id="white" value="White"
                       @onchange="() => _isWhiteSide = true"
                       checked="@(_isWhiteSide)"/>
                <label for="white">White</label>
                <input type="radio" name="play-side" id="black" value="Black"
                       @onchange="() => _isWhiteSide = false"
                       checked="@(!_isWhiteSide)"/>
                <label for="black">Black</label>
            </div>
            <div>
                <label>Game room:</label>
                <input type="text" @bind="_gameRoomInt"/>
                <button @onclick="JoinGame">Join</button>
            </div>
            <div>
                <label>Base time:</label>
                <input type="number" @bind="_timeControlBase"/>
                <label>Increment time:</label>
                <input type="number" @bind="_timeControlIncrement"/>
            </div>
            <button @onclick="CreateGame">Create the game</button>
        </li>
    </ul>
</div>

@code {

    private Game.GameClient _client;
    private IPosition _position = new Position(new Board(),new PieceValue());

    private readonly IStockfishService _stockfish = new StockfishHttpClient(new HttpClient());

    private readonly Dictionary<int, Tuple<int, int, int>> _levels = new()
    {
        {
            1,
            new Tuple<int, int, int>(3, 1, 50)
        },
        {
            2,
            new Tuple<int, int, int>(6, 2, 100)
        },
        {
            3,
            new Tuple<int, int, int>(9, 3, 150)
        },
        {
            4,
            new Tuple<int, int, int>(11, 4, 200)
        },
        {
            5,
            new Tuple<int, int, int>(14, 6, 250)
        },
        {
            6,
            new Tuple<int, int, int>(17, 8, 300)
        },
        {
            7,
            new Tuple<int, int, int>(20, 10, 350)
        },
        {
            8,
            new Tuple<int, int, int>(20, 12, 400)
        },
    };

    private int _selectedLevel = 1;
    private bool _stockfishActivated;

    private bool _isWhiteSide = true;
    private ulong _gameRoomInt = 0;

    private double _whiteSeconds;
    private double _blackSeconds;

    private bool _whiteTimerActive = true;
    private uint _timeControlBase, _timeControlIncrement;

    protected override void OnInitialized()
    {
        _client = new Game.GameClient(Channel);
    }

    public ChessGame()
    {
        SetFenPosition(Fen.StartPositionFen);
    }

    private async Task CreateGame()
    {
        _whiteSeconds = _timeControlBase;
        _blackSeconds = _timeControlBase;
        var responseGame = await _client.StartGameAsync(new RequestGame()
        {
            GameType = "AI",
            Increment = _timeControlIncrement,
            IsWhite = false,
            Opponent = "",
            Seconds = _timeControlBase,
            Username = "Bob"
        });
        _gameRoomInt = responseGame.GameRoom;
    }

    private async Task JoinGame()
    {
        var call = _client.JoinGame(new RequestJoinGame()
        {
            GameRoom = _gameRoomInt,
            Username = "Bob"
        });
        
        while (await call.ResponseStream.MoveNext(CancellationToken.None))
        {
            var message = call.ResponseStream.Current;

            if (message.Fen.Equals("initial"))
            {
                _whiteSeconds = message.TimeLeftMs / 1000;
                _blackSeconds = message.TimeLeftMs / 1000;
            }
            else if (!message.Fen.Equals(""))
            {
                _whiteTimerActive = !_whiteTimerActive;
                SetFenPosition(message.Fen);
            }

            
            if (message.GameEndType != (uint)GameEndTypes.TimeIsUp)
            {
                UpdateTimers(message.IsWhite, message.TimeLeftMs);
            }
            
            StateHasChanged();
        }
    }

    private void UpdateTimers(bool white, double seconds)
    {
        if (white) _whiteSeconds = seconds / 1000;
        else _blackSeconds = seconds / 1000;
    }

    private void SetFenPosition(string fen)
    {
        FenData fenData = new FenData(fen);
        State state = new State();
        _position.Set(in fenData, ChessMode.Normal, state);
    }

    public async Task<int> MakeMove(Move move)
    {
        var _call = await _client.MakeMoveAsync(new RequestMakeMove()
        {
            FromSquare = move.FromSquare().ToString(),
            ToSquare = move.ToSquare().ToString(),
            GameRoom = _gameRoomInt,
            MoveType = (uint) move.MoveType(),
            Promotion = (uint) move.PromotedPieceType().AsInt()
        });
        return (int) _call.Status;
    }

    public void PlayStockfish()
    {
        if (_selectedLevel is > 0 and < 9)
            _stockfishActivated = true;
    }

}