@using Rudzoft.ChessLib.MoveGeneration
@using Rudzoft.ChessLib.Types
@using Rudzoft.ChessLib.Extensions
@using Rudzoft.ChessLib
@using Domain.DTOs
@using System.Diagnostics
@using System.Runtime.InteropServices.ComTypes
@namespace BlazorWASM.Pages.ChessComponents

<div class="chess-board @(!IsWhiteSide ? "black-side" : "")">

    @{
        var index = 0;
        var isBlackSquare = _isFirstSquareBlack;
        _currentPieces = ParsePositionToPieces();
        var kingSquareInCheck = KingSquareInCheck();

        for (var rank = Ranks.Rank8; rank >= Ranks.Rank1; rank--)
        {
            for (var file = Files.FileA; file <= Files.FileH; file++)
            {
                isBlackSquare = !isBlackSquare;
                var squareId = new Square(rank, file).Value;
                var hasMoveTo = _currentMoves.Any(move => move.ToSquare() == squareId && move.IsValidMove());
                <SquareComponent
                    SquareId="@squareId"
                    HasMoveTo="@hasMoveTo"
                    IsBlackSquare="@isBlackSquare"
                    Piece="@_currentPieces[index]"
                    OnClick="@OnSquareClicked"
                    IsWhiteSide="@IsWhiteSide"
                    IsKingCheck="@(kingSquareInCheck == squareId)"/>

                index++;
            }
            isBlackSquare = !isBlackSquare;
        }
    }

</div>

@code {

    private IPosition? _position;
    private List<ExtMove> _legalMoves = new();

    [Parameter]
    public IPosition? Position
    {
        get => _position;
        set
        {
            _position = value;
            GenerateMoves();
        }
    }

    [Parameter]
    public EventCallback<Move> OnMoveMade { get; set; }

    [Parameter]
    public bool IsWhiteSide { get; set; }

    private List<Piece> _currentPieces = EmptyList<Piece>();
    private List<Move> _currentMoves = EmptyList<Move>();
    private bool _isFirstSquareBlack = true;

    // Lists need to have values initialized to null to avoid Index out of bounds exception while rendering the chessboard. 
    private static List<T> EmptyList<T>(int initialSize = 64)
    {
        return new List<T>(new T[initialSize]);
    }

    private Square KingSquareInCheck()
    {
        if (Position is {InCheck: true })
            return Position.GetKingSquare(Position.SideToMove);

        return Square.None;
    }


    private List<Piece> ParsePositionToPieces()
    {
        List<Piece> chessPieces = EmptyList<Piece>();

        if (Position == null)
            return chessPieces;

        var index = 0;

        for (var rank = Ranks.Rank8; rank >= Ranks.Rank1; rank--)
        {
            for (var file = Files.FileA; file <= Files.FileH; file++)
            {
                var piece = Position.GetPiece(new Square(rank, file));

                chessPieces[index] = piece;

                index++;
            }
        }
        return chessPieces;
    }

    private List<Move> GenerateMovesForSquare(ChessClickDto dto)
    {
        var moves = _legalMoves
            .FindAll(move => move.Move.FromSquare() == dto.SquareType)
            .Select(move => move.Move).ToList();
        return moves;
    }

    private void GenerateMoves()
    {
        _legalMoves = Position.GenerateMoves().ToList();
    }

    private void OnSquareClicked(ChessClickDto dto)
    {
        if (dto.HasMoveTo)
        {
            MakeMove(dto);
            return;
        }

        if (dto.PieceType != Pieces.NoPiece)
        {
            if ((dto.PieceType.Value.AsInt() <= 6 && IsWhiteSide) || (dto.PieceType.Value.AsInt() >= 9 && !IsWhiteSide))
                _currentMoves = GenerateMovesForSquare(dto);
        }
        else
        {
            _currentMoves = EmptyList<Move>();
        }
    }

    private void MakeMove(ChessClickDto dto)
    {
        var move = _currentMoves.Find(move => move.ToSquare() == dto.SquareType);
        _currentMoves = EmptyList<Move>();
        MockMove(move);
        OnMoveMade.InvokeAsync(move);
    }

    private void MockMove(Move move)
    {
        if (!move.IsType(MoveTypes.Normal)) return;
        if (Position != null)
        {
            Position.Board.MovePiece(move.FromSquare(), move.ToSquare());
            StateHasChanged();
        }
    }

}