@page "/ChessGame"
@using Rudzoft.ChessLib.Types
@using Rudzoft.ChessLib
@using Rudzoft.ChessLib.Enums
@using Rudzoft.ChessLib.Fen
@using Position = Rudzoft.ChessLib.Position
@using Domain.Enums
@using BlazorWASM.Pages.ChessComponents
@using System.Security.Claims
@using Domain.DTOs.GameEvents
@using HttpClients.ClientInterfaces
@inject IDialogService DialogService
@inject IJSRuntime Js
@inject ISnackbar Snackbar
@inject IGameService GameService
@inject NavigationManager NavMgr
@implements IDisposable


<audio id="move" src="sounds/move.mp3"></audio>
<audio id="notify" src="sounds/notify.mp3"></audio>


<MudContainer Class="mt-10" MaxWidth="MaxWidth.Medium">
    <MudGrid Style="align-items: center" Justify="Justify.SpaceAround" Spacing="6">
        <MudItem xs="12" sm="9" md="8">
            <MudGrid Justify="Justify.SpaceBetween" Spacing="1">
                <MudItem xs="8">
                    <NicknameComponent Nickname="@_opponentName"/>
                </MudItem>
                <MudItem xs="4">
                    <TimerComponent Active="@(_isWhiteSide == GameSides.White ? !_whiteTimerActive : _whiteTimerActive)"
                                    Seconds="@(_isWhiteSide == GameSides.White ? _blackSeconds : _whiteSeconds)"/>
                </MudItem>
                <MudItem xs="12" Class="d-flex justify-center align-center">
                    <ChessBoardComponent OnMoveMade="MakeMove" Position="@_position" IsWhiteSide="@(_isWhiteSide == GameSides.White)"/>
                </MudItem>
                <MudItem xs="8">
                    <NicknameComponent Nickname="@_currentUser"/>
                </MudItem>
                <MudItem xs="4">
                    <TimerComponent Active="@(_isWhiteSide == GameSides.White ? _whiteTimerActive : !_whiteTimerActive)"
                                    Seconds="@(_isWhiteSide == GameSides.White ? _whiteSeconds : _blackSeconds)"/>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="9" md="4">
            <MudGrid>
                @if (GameService.IsDrawOfferPending)
                {
                    <MudItem Style="text-align: center" xs="12">
                        <MudPaper Class="my-2 pa-2 mud-theme-primary">
                            <MudGrid Spacing="2" Justify="Justify.SpaceBetween">
                                <MudItem Class="d-flex align-center" xs="12" sm="6" md="12">
                                    <MudText Class="flex-1" Typo="Typo.subtitle1" Align="Align.Center">You have a draw offer!</MudText>
                                </MudItem>
                                <MudItem xs="6" sm="3" md="6">
                                    <MudButton @onclick="() => SendDrawResponse(true)" Variant="Variant.Filled" FullWidth="true" Color="Color.Tertiary">Accept</MudButton>
                                </MudItem>
                                <MudItem xs="6" sm="3" md="6">
                                    <MudButton @onclick="() => SendDrawResponse(false)" Variant="Variant.Filled" FullWidth="true" Color="Color.Dark">Decline</MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                }
                <MudItem xs="6">
                    <MudButton @onclick="Resign" Variant="Variant.Filled" FullWidth="true" Color="Color.Dark">
                        Resign <MudIcon Icon="@Icons.Filled.OutlinedFlag" Size="Size.Small"></MudIcon>
                    </MudButton>
                </MudItem>
                <MudItem xs="6">
                    <MudButton @onclick="OfferDraw" Variant="Variant.Filled" FullWidth="true" Color="Color.Dark">Offer Draw</MudButton>
                </MudItem>
                <MudItem xs="12">
                    <ChatWindow GameRoom="@GameService.GameRoomId"></ChatWindow>
                </MudItem>
            </MudGrid>

        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string _currentUser = "NotLoggedInMaster";

    private readonly IPosition _position = new Position(new Board(), new PieceValue());
    private double _whiteSeconds;
    private double _blackSeconds;
    private bool _whiteTimerActive = true;
    private string _opponentName = "PlaceholderJoe";

    //Form input bindings
    private GameSides _isWhiteSide = GameSides.White;

    protected override void OnInitialized()
    {
        SetFenPosition(Fen.StartPositionFen);
        InitGameLogic();
    }


    public void Dispose()
    {
        GameService.TimeUpdated -= OnTimeUpdated;
        GameService.NewFenReceived -= OnNewFenReceived;
        GameService.ResignationReceived -= OnResignationReceived;
        GameService.NewPlayerJoined -= OnPlayerJoined;
        GameService.DrawOffered -= OnDrawOffered;
        GameService.DrawOfferTimedOut -= OnDrawOfferTimedOut;
        GameService.DrawOfferAccepted -= OnDrawOfferAccepted;
        GameService.EndOfTheGameReached -= OnEndOfTheGameReached;
        GameService.GameFirstJoined -= OnGameFirstJoined;
        GameService.StateReceived -= OnGameStateReceived;
        GameService.LeaveRoom();
        GameService.GameRoomId = null;
    }

    protected override async Task OnInitializedAsync()
    {
        if (GameService.GameRoomId == null)
        {
            NavMgr.NavigateTo("/");
        }
        else
        {
            var authState = await AuthState;
            var user = authState.User;
            if (user.Identity == null) return;
            _currentUser = user.Identity.Name!;
            await GameService.GetCurrentGameState();
        }
    }

    private void InitGameLogic()
    {
        GameService.TimeUpdated += OnTimeUpdated;
        GameService.NewFenReceived += OnNewFenReceived;
        GameService.ResignationReceived += OnResignationReceived;
        GameService.NewPlayerJoined += OnPlayerJoined;
        GameService.DrawOffered += OnDrawOffered;
        GameService.DrawOfferTimedOut += OnDrawOfferTimedOut;
        GameService.DrawOfferAccepted += OnDrawOfferAccepted;
        GameService.EndOfTheGameReached += OnEndOfTheGameReached;
        GameService.GameFirstJoined += OnGameFirstJoined;
        GameService.StateReceived += OnGameStateReceived;
    }

    private void OnGameStateReceived(CurrentGameStateDto dto)
    {
        _opponentName = dto.UsernameWhite.Equals(_currentUser) ? dto.UsernameBlack : dto.UsernameWhite;
        PlaySound("notify");
        SetFenPosition(dto.FenString);
        Notify("Game joined. Have fun!", Severity.Success);
        _whiteSeconds = dto.WhiteTimeLeftMs / 1000;
        _blackSeconds = dto.BlackTimeLeftMs / 1000;
        StateHasChanged();
    }

    private async Task<AckTypes> MakeMove(Move move)
    {
        try
        {
            _whiteTimerActive = !_whiteTimerActive;
            var t = await GameService.MakeMove(move);
            return t;
        }
        catch (InvalidOperationException e)
        {
            Notify(e.Message, Severity.Warning);
            return AckTypes.GameNotFound;
        }
    }

    private async void Resign()
    {
        try
        {
            var ack = await GameService.Resign();
            if (ack == (uint) AckTypes.Success) return;
        }
        catch (InvalidOperationException e)
        {
            Notify(e.Message, Severity.Warning);
        }

        Notify("Failed to resign", Severity.Error);
    }

    private async void OfferDraw()
    {
        AckTypes ack;

        try
        {
            ack = await GameService.OfferDraw();
        }
        catch (InvalidOperationException e)
        {
            Notify(e.Message, Severity.Warning);
            return;
        }

        switch (ack)
        {
            case AckTypes.Success:
                Notify("Draw Offer Successful!", Severity.Info);
                return;
            case AckTypes.DrawOfferDeclined:
                Notify("Draw Offer Declined!", Severity.Info);
                break;
        }
    }

    private async void SendDrawResponse(bool accepted)
    {
        AckTypes ack;
        try
        {
            ack = await GameService.SendDrawResponse(accepted);
            GameService.IsDrawOfferPending = false;
        }
        catch (InvalidOperationException e)
        {
            Notify(e.Message, Severity.Warning);
            return;
        }

        if (ack == AckTypes.Success)
        {
            StateHasChanged();
        }
        else
        {
            Notify($"Failed to send draw response! AckType = {ack}", Severity.Error);
        }
    }

    private void OnGameFirstJoined()
    {
        Enum.TryParse(GameService.OnWhiteSide ? "White" : "Black", out GameSides side);
        _isWhiteSide = side;
    }

    private void OnEndOfTheGameReached(GameEventDto dto)
    {
        PlaySound("notify");
        switch (dto.GameEndType)
        {
            case (uint) GameEndTypes.CheckMate:
                if ((dto.IsWhite && GameService.OnWhiteSide) || (!dto.IsWhite && !GameService.OnWhiteSide))
                    DisplayDefaultDialog("You got checkmated!");
                else
                    DisplayDefaultDialog("You checkmated your opponent!");
                break;
            case (uint) GameEndTypes.Repetition:
                DisplayDefaultDialog("Draw by repetition!");
                break;
            case (uint) GameEndTypes.Pat:
                DisplayDefaultDialog("Stalemate!");
                break;
            case (uint) GameEndTypes.FiftyMove:
                DisplayDefaultDialog("Draw by 50 moves!");
                break;
            case (uint) GameEndTypes.MaterialDrawn:
                DisplayDefaultDialog("Draw! Insufficient material!");
                break;
        }
    }

    private void OnTimeUpdated(GameEventDto dto)
    {
        if (dto.GameEndType == (uint) GameEndTypes.TimeIsUp)
        {
            if ((dto.IsWhite && GameService.OnWhiteSide) || (!dto.IsWhite && !GameService.OnWhiteSide))
            {
                DisplayDefaultDialog("You ran out of time! You loose!");
            }
            else
            {
                DisplayDefaultDialog("Your opponent ran out of time! You win!");
            }
        }
        else
        {
            if (dto.IsWhite)
            {
                _whiteSeconds = dto.TimeLeftMs / 1000;
                _whiteTimerActive = true;
            }
            else
            {
                _blackSeconds = dto.TimeLeftMs / 1000;
                _whiteTimerActive = false;
            }

            StateHasChanged();
        }
    }

    private void OnNewFenReceived(GameEventDto dto)
    {
        SetFenPosition(dto.FenString);
        PlaySound("move");
    }

    private void SetFenPosition(string fen)
    {
        FenData fenData = new FenData(fen);
        State state = new State();
        _position.Set(in fenData, ChessMode.Normal, state);

        StateHasChanged();
    }

    private void OnResignationReceived(GameEventDto dto)
    {
        PlaySound("notify");
        if ((dto.IsWhite && GameService.OnWhiteSide) || (!dto.IsWhite && !GameService.OnWhiteSide))
        {
            DisplayDefaultDialog("You resigned the game!");
        }
        else
        {
            DisplayDefaultDialog("Your opponent resigned the game!");
        }
    }

    private void OnPlayerJoined(GameEventDto dto)
    {
        _opponentName = dto.UsernameWhite.Equals(_currentUser) ? dto.UsernameBlack : dto.UsernameWhite;
        PlaySound("notify");
        Notify("Game joined. Have fun!", Severity.Success);
        StateHasChanged();
    }

    private void OnDrawOffered(GameEventDto dto)
    {
        Notify($"Draw offer", Severity.Info);
        StateHasChanged();
    }

    private void OnDrawOfferTimedOut(GameEventDto dto)
    {
        Notify("Draw offer expired", Severity.Info);
        StateHasChanged();
    }

    private void OnDrawOfferAccepted(GameEventDto dto)
    {
        PlaySound("notify");
        DisplayDefaultDialog("The game finished in a draw!");
        StateHasChanged();
    }

    private void PlaySound(string sound)
    {
        Js.InvokeAsync<string>("PlaySound", new object[] {sound});
    }

    private void Notify(string message, Severity severity)
    {
        Snackbar.Add(message, severity);
    }

    private void DisplayDefaultDialog(string message)
    {
        var options = new DialogOptions {CloseOnEscapeKey = true};
        DialogService.Show<InformDialogComponent>(message, options);
    }

}