@page "/ChessGame"
@using Rudzoft.ChessLib.Types
@using StockfishWrapper
@using MudBlazor
@using Rudzoft.ChessLib
@using Rudzoft.ChessLib.Enums
@using Rudzoft.ChessLib.Fen
@using Application.LogicInterfaces
@using Position = Rudzoft.ChessLib.Position
@using Domain.DTOs
@using Domain.Enums
@using Grpc.Core
@using BlazorWASM.Pages.ChessComponents
@using System.Security.Claims
@inject IDialogService DialogService
@inject IJSRuntime Js
@inject ISnackbar Snackbar
@inject IGameLogic GameLogic
@inject IChatLogic ChatLogic
@implements IDisposable


<h3 style="margin: 10px auto; text-align: center">ChessGame</h3>

<audio id="move" src="sounds/move.mp3"></audio>
<audio id="notify" src="sounds/notify.mp3"></audio>

<MudButton @onclick="Resign" Variant="Variant.Filled" Color="Color.Primary">Resign</MudButton>
<MudButton @onclick="OfferDraw" Variant="Variant.Filled" Color="Color.Primary">Offer Draw</MudButton>
@if (GameLogic.IsDrawOfferPending)
{
    <div>
        <h3>You have a draw offer</h3>
        <MudButton @onclick="() => SendDrawResponse(true)" Variant="Variant.Filled" Color="Color.Success">Accept</MudButton>
        <MudButton @onclick="() => SendDrawResponse(false)" Variant="Variant.Filled" Color="Color.Error">Decline</MudButton>
    </div>
}

<MudGrid Justify="Justify.SpaceAround" Spacing="10">
    <MudItem md="12" lg="6">
        <MudContainer MaxWidth="MaxWidth.Small">
            <TimerComponent Active="@(_isWhiteSide == GameSides.White ? !_whiteTimerActive : _whiteTimerActive)"
                            Seconds="@(_isWhiteSide == GameSides.White ? _blackSeconds : _whiteSeconds)"/>
            <ChessBoardComponent OnMoveMade="MakeMove" Position="@_position" IsWhiteSide="@(_isWhiteSide == GameSides.White)"/>
            <TimerComponent Active="@(_isWhiteSide == GameSides.White ? _whiteTimerActive : !_whiteTimerActive)"
                            Seconds="@(_isWhiteSide == GameSides.White ? _whiteSeconds : _blackSeconds)"/>
        </MudContainer>
    </MudItem>
    <MudItem md="12" lg="6">
        <MudContainer MaxWidth="MaxWidth.Small">
            <MudSelect Dense="true" T="string" @bind-Value="@_selectedLevel" Label="Choose a Stockfish Level:" Variant="Variant.Text">
                <MudSelectItem T="string" Value="@(StockfishLevels.StockfishAi1.Value)">Level 1</MudSelectItem>
                <MudSelectItem T="string" Value="@(StockfishLevels.StockfishAi2.Value)">Level 2</MudSelectItem>
                <MudSelectItem T="string" Value="@(StockfishLevels.StockfishAi3.Value)">Level 3</MudSelectItem>
                <MudSelectItem T="string" Value="@(StockfishLevels.StockfishAi4.Value)">Level 4</MudSelectItem>
                <MudSelectItem T="string" Value="@(StockfishLevels.StockfishAi5.Value)">Level 5</MudSelectItem>
                <MudSelectItem T="string" Value="@(StockfishLevels.StockfishAi6.Value)">Level 6</MudSelectItem>
                <MudSelectItem T="string" Value="@(StockfishLevels.StockfishAi7.Value)">Level 7</MudSelectItem>
                <MudSelectItem T="string" Value="@(StockfishLevels.StockfishAi8.Value)">Level 8</MudSelectItem>
            </MudSelect>
            <MudRadioGroup @bind-SelectedOption="_isWhiteSide" T="@GameSides">
                <MudRadio T="@GameSides" Color="Color.Default" Option="@GameSides.White">White</MudRadio>
                <MudRadio T="@GameSides" Color="Color.Dark" Option="@GameSides.Black">Black</MudRadio>
                <MudRadio T="@GameSides" Color="Color.Dark" Option="@GameSides.Random">Random</MudRadio>
            </MudRadioGroup>
            <MudNumericField T="ulong" @bind-Value="_gameRoomInt" Label="Room id" Variant="Variant.Text" Min="0"/>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="JoinGame">Join</MudButton>
            <MudRadioGroup @bind-SelectedOption="_opponentType" T="OpponentTypes">
                <MudRadio T="@OpponentTypes" Color="Color.Default" Option="@OpponentTypes.Ai">AI</MudRadio>
                <MudRadio T="@OpponentTypes" Color="Color.Default" Option="@OpponentTypes.Friend">Friend</MudRadio>
                <MudRadio T="@OpponentTypes" Color="Color.Default" Option="@OpponentTypes.Random">Random</MudRadio>
            </MudRadioGroup>
            <MudTextField T="string" Label="Opponent" Required="true" RequiredError="User name is required!" @bind-Value="_opponentName"/>
            <MudNumericField T="uint" @bind-Value="_timeControlBase" Label="Base time" Variant="Variant.Filled" Min="60"/>
            <MudNumericField T="uint" @bind-Value="_timeControlIncrement" Label="Increment time" Variant="Variant.Filled" Min="0"/>
            <MudCheckBox @bind-Checked="@_isGamePrivate">Private</MudCheckBox>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="CreateGame">Create game</MudButton>
        </MudContainer>
        <MudContainer Class="mt-4" MaxWidth="MaxWidth.Small">
            <ChatWindow Receiver="@_opponentName"></ChatWindow>
        </MudContainer>
    </MudItem>
</MudGrid>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string _currentUser = "";

    private readonly IPosition _position = new Position(new Board(), new PieceValue());
    private double _whiteSeconds;
    private double _blackSeconds;
    private bool _whiteTimerActive = true;

    //Form input bindings
    private string _selectedLevel = StockfishLevels.StockfishAi1.Value;
    private OpponentTypes _opponentType = OpponentTypes.Ai;
    private ulong _gameRoomInt;
    private GameSides _isWhiteSide = GameSides.White;
    private string _opponentName = "";
    private uint _timeControlBase = 120;
    private uint _timeControlIncrement;
    private bool _isGamePrivate;

    protected override void OnInitialized()
    {
        SetFenPosition(Fen.StartPositionFen);
        InitGameLogic();
    }

    public void Dispose()
    {
        GameLogic.TimeUpdated -= OnTimeUpdated;
        GameLogic.NewFenReceived -= OnNewFenReceived;
        GameLogic.ResignationReceived -= OnResignationReceived;
        GameLogic.InitialTimeReceived -= OnInitialTimeReceived;
        GameLogic.DrawOffered -= OnDrawOffered;
        GameLogic.DrawOfferTimedOut -= OnDrawOfferTimedOut;
        GameLogic.DrawOfferAccepted -= OnDrawOfferAccepted;
        GameLogic.EndOfTheGameReached -= OnEndOfTheGameReached;
        GameLogic.GameFirstJoined -= OnGameFirstJoined;

        GameLogic.InitialTimeReceived -= ChatLogic.OnInitialTimeReceived;
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        if (user.Identity == null) return;
        _currentUser = user.Identity.Name!;
    }

    private void InitGameLogic()
    {
        GameLogic.TimeUpdated += OnTimeUpdated;
        GameLogic.NewFenReceived += OnNewFenReceived;
        GameLogic.ResignationReceived += OnResignationReceived;
        GameLogic.InitialTimeReceived += OnInitialTimeReceived;
        GameLogic.DrawOffered += OnDrawOffered;
        GameLogic.DrawOfferTimedOut += OnDrawOfferTimedOut;
        GameLogic.DrawOfferAccepted += OnDrawOfferAccepted;
        GameLogic.EndOfTheGameReached += OnEndOfTheGameReached;
        GameLogic.GameFirstJoined += OnGameFirstJoined;
        
        GameLogic.InitialTimeReceived += ChatLogic.OnInitialTimeReceived;
    }

    private async Task CreateGame()
    {
        var opponentName = "";
        try
        {
            opponentName = _opponentType switch 
            {
                OpponentTypes.Ai => _selectedLevel,
                OpponentTypes.Friend => _opponentName,
                OpponentTypes.Random => string.Empty,
                _ => throw new ArgumentNullException()
                };
        }
        catch (ArgumentNullException)
        {
            Notify("Choose a game type before starting a game!", Severity.Warning);
        }

        var request = new RequestGameDto
        {
            OpponentType = _opponentType,
            Increment = _timeControlIncrement,
            Side = _isWhiteSide,
            OpponentName = opponentName,
            Seconds = _timeControlBase,
            IsVisible = !_isGamePrivate
        };

        try
        {
            var response = await GameLogic.CreateGame(request);

            _gameRoomInt = response.GameRoom;

            Notify($"Game created successfully! Game id: {response.GameRoom}", Severity.Success);
        }
        catch (InvalidOperationException)
        {
            Notify("You have to be logged in to create a game!", Severity.Warning);
        }
        catch (HttpRequestException)
        {
            Notify("Network error, Failed to create a game.", Severity.Error);
        }
    }

    private async Task JoinGame()
    {
        try
        {
    //workaround, initial position should be sent and not set
            SetFenPosition(Fen.StartPositionFen);
            GameLogic.JoinGame(new RequestJoinGameDto
            {
                GameRoom = _gameRoomInt,
            });
        }
        catch (ArgumentException)
        {
    //TODO: This catch will never catch anything cause there is no error thrown. New grpc message is needed
            Notify("Game room not found.", Severity.Warning);
        }
        catch (RpcException)
        {
            Notify("Connection error. Failed to participate in game. ¯\\_(ツ)_/¯", Severity.Error);
        }
    }

    public async Task<int> MakeMove(Move move)
    {
        try
        {
            return await GameLogic.MakeMove(move);
        }
        catch (InvalidOperationException e)
        {
            Notify(e.Message, Severity.Warning);
            return (int) AckTypes.GameNotFound;
        }
    }

    private async void Resign()
    {
        AckTypes ack;
        try
        {
            ack = await GameLogic.Resign();
        }
        catch (InvalidOperationException e)
        {
            Notify(e.Message, Severity.Warning);
            return;
        }

        if (ack == (uint) AckTypes.Success) return;
        Notify("Failed to resign", Severity.Error);
    }

    private async void OfferDraw()
    {
        AckTypes ack;

        try
        {
            ack = await GameLogic.OfferDraw();
        }
        catch (InvalidOperationException e)
        {
            Notify(e.Message, Severity.Warning);
            return;
        }

        switch (ack)
        {
            case AckTypes.Success:
                Notify("Draw Offer Successful!", Severity.Info);
                return;
            case AckTypes.DrawOfferDeclined:
                Notify("Draw Offer Declined!", Severity.Info);
                break;
        }
    }

    private async void SendDrawResponse(bool accepted)
    {
        AckTypes ack;
        try
        {
            ack = await GameLogic.SendDrawResponse(accepted);
        }
        catch (InvalidOperationException e)
        {
            Notify(e.Message, Severity.Warning);
            return;
        }

        if (ack == AckTypes.Success)
        {
            StateHasChanged();
        }
        else
        {
            Notify($"Failed to send draw response! AckType = {ack}", Severity.Error);
        }
    }

    private void OnGameFirstJoined(JoinedGameStreamDto dto)
    {
        Enum.TryParse(GameLogic.OnWhiteSide ? "White" : "Black", out GameSides side);
        _isWhiteSide = side;
    }

    private void OnEndOfTheGameReached(JoinedGameStreamDto dto)
    {
        PlaySound("notify");
        switch (dto.GameEndType)
        {
            case (uint) GameEndTypes.CheckMate:
                if ((dto.IsWhite && GameLogic.OnWhiteSide) || (!dto.IsWhite && !GameLogic.OnWhiteSide))
                    DisplayDefaultDialog("You got checkmated!");
                else
                    DisplayDefaultDialog("You checkmated your opponent!");
                break;
            case (uint) GameEndTypes.Repetition:
                DisplayDefaultDialog("Draw by repetition!");
                break;
            case (uint) GameEndTypes.Pat:
                DisplayDefaultDialog("Stalemate!");
                break;
            case (uint) GameEndTypes.FiftyMove:
                DisplayDefaultDialog("Draw by 50 moves!");
                break;
            case (uint) GameEndTypes.MaterialDrawn:
                DisplayDefaultDialog("Draw! Insufficient material!");
                break;
        }
    }

    private void OnTimeUpdated(JoinedGameStreamDto dto)
    {
        if (dto.GameEndType == (uint) GameEndTypes.TimeIsUp)
        {
            if ((dto.IsWhite && GameLogic.OnWhiteSide) || (!dto.IsWhite && !GameLogic.OnWhiteSide))
            {
                DisplayDefaultDialog("You ran out of time! You loose!");
            }
            else
            {
                DisplayDefaultDialog("Your opponent ran out of time! You win!");
            }
        }
        else
        {
            if (dto.IsWhite) _whiteSeconds = dto.TimeLeftMs / 1000;
            else _blackSeconds = dto.TimeLeftMs / 1000;
            StateHasChanged();
        }
    }

    private void OnNewFenReceived(JoinedGameStreamDto dto)
    {
        SetFenPosition(dto.FenString);
        PlaySound("move");
    }

    private void SetFenPosition(string fen)
    {
        FenData fenData = new FenData(fen);
        State state = new State();
        _position.Set(in fenData, ChessMode.Normal, state);
        StateHasChanged();
    }

    private void OnResignationReceived(JoinedGameStreamDto dto)
    {
        PlaySound("notify");
        if ((dto.IsWhite && GameLogic.OnWhiteSide) || (!dto.IsWhite && !GameLogic.OnWhiteSide))
        {
            DisplayDefaultDialog("You resigned the game!");
        }
        else
        {
            DisplayDefaultDialog("Your opponent resigned the game!");
        }
    }

    private void OnInitialTimeReceived(JoinedGameStreamDto dto)
    {
        _opponentName = dto.UsernameWhite.Equals(_currentUser) ? dto.UsernameBlack : dto.UsernameWhite;
        PlaySound("notify");
        Notify("Game joined. Have fun!", Severity.Success);
        _whiteSeconds = dto.TimeLeftMs / 1000;
        _blackSeconds = dto.TimeLeftMs / 1000;
        StateHasChanged();
    }

    private void OnDrawOffered(JoinedGameStreamDto dto)
    {
        Notify($"Draw offer", Severity.Info);
        StateHasChanged();
    }

    private void OnDrawOfferTimedOut(JoinedGameStreamDto dto)
    {
        Notify("Draw offer expired", Severity.Info);
        StateHasChanged();
    }

    private void OnDrawOfferAccepted(JoinedGameStreamDto dto)
    {
        PlaySound("notify");
        DisplayDefaultDialog("The game finished in a draw!");
        StateHasChanged();
    }

    private void PlaySound(string sound)
    {
        Js.InvokeAsync<string>("PlaySound", new object[] {sound});
    }

    private void Notify(string message, Severity severity)
    {
        Snackbar.Add(message, severity);
    }

    private void DisplayDefaultDialog(string message)
    {
        var options = new DialogOptions {CloseOnEscapeKey = true};
        DialogService.Show<InformDialogComponent>(message, options);
    }

}