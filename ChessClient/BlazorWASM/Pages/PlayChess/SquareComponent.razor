@using Rudzoft.ChessLib.Types
@using Domain.DTOs
@namespace BlazorWASM.Pages.ChessComponents

<div class="@($"square {SquareStyle()}")" @onclick="OnClicked">
    <div class="@($"square-overlay{RenderOverlayStyle()}")"></div>
    <div class="piece @(!IsWhiteSide ? "black-side" : "")">
        <div class="piece-icon">@_pieceRender</div>
    </div>
</div>

@code {

    private MarkupString _pieceRender;

    [Parameter]
    public Squares SquareId { get; set; }

    [Parameter]
    public bool IsBlackSquare { get; set; }

    [Parameter]
    public bool IsKingCheck { get; set; }

    [Parameter]
    public bool HasMoveTo { get; set; }

    private Piece? _piece = Pieces.NoPiece;

    [Parameter]
    public Piece? Piece
    {
        get => _piece;
        set
        {
            _piece = value;
            RenderPiece(value);
            StateHasChanged();
        }
    }

    [Parameter]
    public EventCallback<ChessClickDto> OnClick { get; set; }

    [Parameter]
    public bool IsWhiteSide { get; set; }

    private void OnClicked()
    {
        OnClick.InvokeAsync(new ChessClickDto(Piece?.Value, SquareId, HasMoveTo));
    }

    private void RenderPiece(Piece? piece)
    {
        if (!piece.HasValue || piece.Value.Value == Pieces.NoPiece)
        {
            _pieceRender = new MarkupString(String.Empty);
            return;
        }

        var pieceId = piece.Value.Value;
        
        string result = "<img style=\"width: 100%\" src=\"icons\\Chess";
        //TODO: Add contribution to the creator
        result += pieceId switch
        {
            Pieces.WhitePawn => "_plt45.png\"/>",
            Pieces.WhiteKnight => "_nlt45.png\"/>",
            Pieces.WhiteBishop => "_blt45.png\"/>",
            Pieces.WhiteRook => "_rlt45.png\"/>",
            Pieces.WhiteQueen => "_qlt45.png\"/>",
            Pieces.WhiteKing =>"_klt45.png\"/>",
            Pieces.BlackPawn => "_pdt45.png\"/>",
            Pieces.BlackKnight => "_ndt45.png\"/>",
            Pieces.BlackBishop => "_bdt45.png\"/>",
            Pieces.BlackRook => "_rdt45.png\"/>",
            Pieces.BlackQueen => "_qdt45.png\"/>",
            Pieces.BlackKing => "_kdt45.png\"/>",
            Pieces.PieceNb => "",
            _ => throw new ArgumentOutOfRangeException()
            };
        _pieceRender = new MarkupString(result);
    }

    private string RenderOverlayStyle()
    {
        if (!HasMoveTo)
        {
            return "";
        }

        if (!Piece.HasValue || Piece.Value.Value == Pieces.NoPiece)
            return "-quiet";

        return "-capture";
    }

    private string SquareStyle()
    {
        var classes = (IsBlackSquare) ? "dark" : "light";

        if (IsKingCheck)
        {
            classes += " check";
        }
        return classes;
    }

}