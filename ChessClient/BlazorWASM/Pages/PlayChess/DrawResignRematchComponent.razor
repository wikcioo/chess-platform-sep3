@using HttpClients.Implementations
@using HttpClients.ClientInterfaces
@inject IGameService GameService

@if (IsDrawOfferPending)
{
    <MudItem Style="text-align: center" xs="12">
        <MudPaper Class="my-2 pa-2 mud-theme-primary">
            <MudGrid Spacing="2" Justify="Justify.SpaceBetween">
                <MudItem Class="d-flex align-center" xs="12" sm="6" md="12">
                    <MudText Class="flex-1" Typo="Typo.subtitle1" Align="Align.Center">You have a draw offer!</MudText>
                </MudItem>
                <MudItem xs="6" sm="3" md="6">
                    <MudButton @onclick="() => OnDrawResponseSentAsync(true)" Variant="Variant.Filled" FullWidth="true" Color="Color.Tertiary">Accept</MudButton>
                </MudItem>
                <MudItem xs="6" sm="3" md="6">
                    <MudButton @onclick="() => OnDrawResponseSentAsync(false)" Variant="Variant.Filled" FullWidth="true" Color="Color.Dark">Decline</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
}
@if (DisplayRematchBtn)
{
    <MudItem xs="12">
        <MudButton @onclick="OnRematchOfferedAsync" Variant="Variant.Filled" FullWidth="true" Color="Color.Dark">
            Rematch <MudIcon Icon="@Icons.Filled.Repeat" Size="Size.Small"></MudIcon>
        </MudButton>
    </MudItem>
}
<MudItem xs="6">
    <MudButton @onclick="OnResignedAsync" Variant="Variant.Filled" FullWidth="true" Color="Color.Dark">
        Resign <MudIcon Icon="@Icons.Filled.OutlinedFlag" Size="Size.Small"></MudIcon>
    </MudButton>
</MudItem>
<MudItem xs="6">
    <MudButton @onclick="OnDrawOfferedAsync" Variant="Variant.Filled" FullWidth="true" Color="Color.Dark">Offer Draw</MudButton>
</MudItem>

@code {
    [Parameter]
    public bool IsDrawOfferPending { get; set; }

    [Parameter]
    public bool DisplayRematchBtn { get; set; }

    [Parameter]
    public EventCallback OnOfferDraw { get; set; }

    [Parameter]
    public EventCallback OnResign { get; set; }

    [Parameter]
    public EventCallback OnRematch { get; set; }

    [Parameter]
    public EventCallback<bool> OnSendDrawResponse { get; set; }

    private async void OnDrawOfferedAsync()
    {
        await OnOfferDraw.InvokeAsync();
    }

    private async void OnResignedAsync()
    {
        await OnResign.InvokeAsync();
    }

    private async void OnRematchOfferedAsync()
    {
        await OnRematch.InvokeAsync();
    }

    private async void OnDrawResponseSentAsync(bool response)
    {
        await OnSendDrawResponse.InvokeAsync(response);
    }
}