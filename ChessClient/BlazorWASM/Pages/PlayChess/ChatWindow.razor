@using Domain.DTOs.Chat
@using MudBlazor
@using HttpClients.ClientInterfaces
@using HttpClients.ClientInterfaces.Signalr
@using HttpClients.Implementations
@using HttpClients.Implementations.Signalr
@using Rudzoft.ChessLib.Extensions
@inject IChatHub ChatHub
@implements IDisposable
@inject ISnackbar Snackbar

<MudPaper Elevation="2" Class="d-flex flex-column overflow-x-auto pa-3" Height="450px">
    <MudText Typo="Typo.subtitle1">Game chat</MudText>
    <MudPaper Class="flex-grow-1  pa-1 mt-1 overflow-y-scroll overflow-x-hidden" Elevation="0">
        <MudText Typo="Typo.body2">
            @((MarkupString)_chatLog)
        </MudText>
    </MudPaper>
    <MudStack Justify="Justify.SpaceAround" Row="true" Spacing="3" AlignItems="AlignItems.Baseline">
        <MudTextField AdornmentColor="Color.Primary" Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Send" OnAdornmentClick="WriteMessageAsync" Margin="Margin.None" Immediate="true" Style="background-color: var(--mud-palette-surface)" T="string" InputType="InputType.Text" placeholder="Enter message" @bind-Value="_messageBody" OnKeyPress="OnKeyPressAsync"/>
    </MudStack>
</MudPaper>

@code {
    [Parameter]
    public ulong? GameRoom { get; set; }
    
    private string _messageBody = "";
    private string _chatLog = "";

    protected override void OnInitialized()
    {
        ChatHub.MessageReceived += OnMessageReceived;
        ChatHub.ChatLogReceived += OnChatLogReceived;
    }

    public void Dispose()
    {
        ChatHub.MessageReceived -= OnMessageReceived;
        ChatHub.ChatLogReceived -= OnChatLogReceived;
    }

    private async Task WriteMessageAsync()
    {
        if (GameRoom == null)
        {
            Notify("You didn't join a game room!", Severity.Warning);
            return;
        }

        if (IsValid())
        {
            await ChatHub.WriteMessageAsync(new MessageDto
            {
                Body = _messageBody,
                GameRoom = (ulong)GameRoom
            });
            _messageBody = "";
            StateHasChanged();
        }
    }

    private void OnMessageReceived(MessageDto dto)
    {
        _chatLog += $"<div>{dto.Username}:{dto.Body}\n</div>";
        StateHasChanged();
    }

    private void OnChatLogReceived(List<MessageDto> log)
    {
        _chatLog = "";
        foreach (var dto in log)
        {
            _chatLog += $"<div>{dto.Username}:{dto.Body}\n</div>";
        }

        StateHasChanged();
    }

    private bool IsValid()
    {
        return !string.IsNullOrEmpty(_messageBody);
    }

    private async void OnKeyPressAsync(KeyboardEventArgs e)
    {
        if (e.Code is not ("Enter" or "NumpadEnter")) return;
        if (IsValid())
        {
            await WriteMessageAsync();
        }
    }

    private void Notify(string message, Severity severity)
    {
        Snackbar.Add(message, severity);
    }
}