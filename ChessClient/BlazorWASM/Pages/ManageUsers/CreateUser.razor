@page "/CreateUser"
@using HttpClients.ClientInterfaces
@using Domain.Models
@using MudBlazor
@inject IUserService UserService

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Class="pa-4 ma-10">
        <MudText Typo="Typo.h5" Align="Align.Center">Create User</MudText>
        <MudTextField @bind-Value="_username" Label="Username"/>
        <MudTextField @bind-Value="_email" Label="Email" InputType="InputType.Email"/>
        <MudTextField @bind-Value="_password" Label="Password" InputType="InputType.Password"/>
        <MudTextField @bind-Value="_role" Label="Role"/>
        @if (!string.IsNullOrEmpty(_resultMsg))
        {
            <MudAlert Severity="Severity.Info" Class="mt-4" Variant="Variant.Filled">@_resultMsg</MudAlert>
        }
        <MudButton Class="mt-4" OnClick="CreateAsync" Variant="Variant.Filled" Disabled="IsValid()">Create</MudButton>
    </MudPaper>
</MudContainer>

@code {
    private string _username = "";
    private string _email = "";
    private string _password = "";
    private string _resultMsg = "";
    private string _color = "";
    private string _role = "";

    private async Task CreateAsync()
    {
        _resultMsg = "";

        try
        {
            var user = await UserService.CreateAsync(new User(_username, _email, _password, _role));
            _username = "";
            _email = "";
            _password = "";
            _role = "";
            _resultMsg = $"User with email {user.Email} successfully created";
            _color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            _resultMsg = e.Message;
            _color = "red";
        }
    }

    private bool IsValid()
    {
        return string.IsNullOrEmpty(_username) || string.IsNullOrEmpty(_email) || string.IsNullOrEmpty(_password) || string.IsNullOrEmpty(_role);
    }

}