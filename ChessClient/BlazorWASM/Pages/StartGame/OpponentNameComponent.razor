@using HttpClients.ClientInterfaces
@using Microsoft.AspNetCore.Components
@using Domain.DTOs.User
@inject IUserService UserService;
@inject ISnackbar Snackbar

<MudAutocomplete T="string" Label="Available opponents" @bind-Value="OpponentName" SearchFunc="@SearchAsync" Variant="Variant.Filled" ShowProgressIndicator="true" ProgressIndicatorColor="Color.Primary"/>

@code {
    [Parameter]
    public string OpponentName
    {
        get => _opponentName;
        set
        {
            if (_opponentName == value) return;
            _opponentName = value;
            OpponentNameChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<string> OpponentNameChanged { get; set; }

    private string _opponentName = "";

    private async Task<IEnumerable<string>> SearchAsync(string username)
    {
        List<string> usernameList = new();

        if (!string.IsNullOrEmpty(username))
        {
            try
            {
                var result = await UserService.GetAsync(new UserSearchParamsDto(username));
                usernameList = result.Select(u => u.Username).ToList();
            }
            catch (Exception e)
            {
                Notify(e.Message, Severity.Error);
            }
        }

        return usernameList;
    }

    private void Notify(string message, Severity severity)
    {
        Snackbar.Add(message, severity);
    }
}