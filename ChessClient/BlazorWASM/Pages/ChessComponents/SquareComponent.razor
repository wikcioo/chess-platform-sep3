@using Rudzoft.ChessLib.Types
@using Domain.DTOs
@namespace BlazorWASM.Pages.ChessComponents

<div class="@($"square {SquareStyle()}")" @onclick="OnClicked">
    <div class="@($"square-overlay{RenderOverlayStyle()}")"></div>
    <div class="piece @(!IsWhiteSide ? "black-side" : "")">@((MarkupString)RenderPiece(false))
    </div>
</div>

@code {
    [Parameter] 
    public Squares SquareId { get; set; }

    [Parameter] 
    public bool IsBlackSquare { get; set; }
    
    [Parameter] 
    public bool IsKingCheck { get; set; }

    [Parameter] 
    public bool HasMoveTo { get; set; }
    
    [Parameter] 
    public Piece? Piece { get; set; }

    [Parameter] 
    public EventCallback<ChessClickDto> OnClick { get; set; }
    
    [Parameter]
    public bool IsWhiteSide { get; set; }

    private void OnClicked()
    {
        OnClick.InvokeAsync(new ChessClickDto(Piece?.Value, SquareId, HasMoveTo));
    }

    private string RenderPiece(bool isUnicode)
    {
        if (!Piece.HasValue)
            return "";

        var pieceId = Piece.Value.Value;
        if (isUnicode)
        {
            return pieceId switch
            {
                Pieces.NoPiece => "",
                Pieces.WhitePawn => "\u2659",
                Pieces.WhiteKnight => "\u2658",
                Pieces.WhiteBishop => "\u2657",
                Pieces.WhiteRook => "\u2656",
                Pieces.WhiteQueen => "\u2655",
                Pieces.WhiteKing =>"\u2654",
                Pieces.BlackPawn => "\u265F",
                Pieces.BlackKnight => "\u265E",
                Pieces.BlackBishop => "\u265D",
                Pieces.BlackRook => "\u265C",
                Pieces.BlackQueen => "\u265B",
                Pieces.BlackKing => "\u265A",
                Pieces.PieceNb => "",
                _ => throw new ArgumentOutOfRangeException()
                }; 
        }
        else
        {
            string result = "<img style=\"height: 45px;\" class=\"piece-icon\" src=\"icons\\Chess";
            //TODO: Add contribution to the creator
            return result + pieceId switch
            {
                Pieces.NoPiece => "",
                Pieces.WhitePawn => "_plt45.svg\"/>",
                Pieces.WhiteKnight => "_nlt45.svg\"/>",
                Pieces.WhiteBishop => "_blt45.svg\"/>",
                Pieces.WhiteRook => "_rlt45.svg\"/>",
                Pieces.WhiteQueen => "_qlt45.svg\"/>",
                Pieces.WhiteKing =>"_klt45.svg\"/>",
                Pieces.BlackPawn => "_pdt45.svg\"/>",
                Pieces.BlackKnight => "_ndt45.svg\"/>",
                Pieces.BlackBishop => "_bdt45.svg\"/>",
                Pieces.BlackRook => "_rdt45.svg\"/>",
                Pieces.BlackQueen => "_qdt45.svg\"/>",
                Pieces.BlackKing => "_kdt45.svg\"/>",
                Pieces.PieceNb => "",
                _ => throw new ArgumentOutOfRangeException()
                }; 
        }
    }

    private string RenderOverlayStyle()
    {
        if (!HasMoveTo)
        {
            return "";
        }

        if (!Piece.HasValue || Piece.Value.Value == Pieces.NoPiece)
            return "-quiet";

        return "-capture";
    }
    
    private string SquareStyle()
    {
        var classes = (IsBlackSquare) ? "dark" : "white";

        if (IsKingCheck)
        {
            classes += " check";
        }
        return classes;
    }
}