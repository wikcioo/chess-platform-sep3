@using Rudzoft.ChessLib.Types
@using Domain.DTOs
@namespace BlazorWASM.Pages.ChessComponents

<div class="square" style="
background-color: @(IsBlack ? "#C0C0C0" : "#FFFFFF");
">
    <div class="@("square-overlay" + RenderOverlayStyle() )" @onclick="OnClicked" ></div>
    <div class="piece" @onclick="OnClicked">@RenderPiece()
    </div>
</div>

@code {
    [Parameter] 
    public Squares SquareId { get; set; }

    [Parameter] 
    public bool IsBlack { get; set; }
    
    [Parameter] 
    public bool HasMoveTo { get; set; }
    
    [Parameter] 
    public Piece? Piece { get; set; }

    [Parameter] 
    public EventCallback<ChessClickDto> OnClick { get; set; }
    
    private void OnClicked()
    {
        OnClick.InvokeAsync(new ChessClickDto(Piece?.Value, SquareId, HasMoveTo));
    }

    private string RenderPiece()
    {
        if (!Piece.HasValue)
            return "";

        var pieceId = Piece.Value.Value;
        
        return pieceId switch
        {
            Pieces.NoPiece => "",
            Pieces.WhitePawn => "\u2659",
            Pieces.WhiteKnight => "\u2658",
            Pieces.WhiteBishop => "\u2657",
            Pieces.WhiteRook => "\u2656",
            Pieces.WhiteQueen => "\u2655",
            Pieces.WhiteKing =>"\u2654",
            Pieces.BlackPawn => "\u265F",
            Pieces.BlackKnight => "\u265E",
            Pieces.BlackBishop => "\u265D",
            Pieces.BlackRook => "\u265C",
            Pieces.BlackQueen => "\u265B",
            Pieces.BlackKing => "\u265A",
            Pieces.PieceNb => "",
            _ => throw new ArgumentOutOfRangeException()
            };
    }

    private string RenderOverlayStyle()
    {
        if (!HasMoveTo)
        {
            return "";
        }

        if (!Piece.HasValue || Piece.Value.Value == Pieces.NoPiece)
            return "-quiet";

        return "-capture";

    }

}