
@using BlazorWASM.Pages.ChessComponents
@using Grpc.Core
@using Grpc.Net.Client
@using GrpcService
@using HttpClients.ClientInterfaces
@using MudBlazor
@using Rudzoft.ChessLib
@using Rudzoft.ChessLib.Enums
@using Rudzoft.ChessLib.Fen
@using Rudzoft.ChessLib.Types
@using Game = GrpcService.Game
@using System.Security.Claims
@using Domain.Enums
@inject GrpcChannel Channel
@inject IAuthService AuthService
@using Position = Rudzoft.ChessLib.Position
@inject IDialogService DialogService
@inject IJSRuntime Js
@page "/StartGame"

<audio id="move" src="sounds/move.mp3"></audio>
<audio id="notify" src="sounds/notify.mp3"></audio>

<MudPaper Class="d-flex justify-center flex-grow-1 gap-4"  Style="@($"color:{Colors.BlueGrey.Darken1}; background:{Colors.BlueGrey.Darken4};")">
    

    <MudItem md="12" lg="6">
        <MudSelect Dense="true" T="int" @bind-Value="@_selectedLevel" Label="Choose a Stockfish Level:" Variant="Variant.Text">
            <MudSelectItem T="int" Value="1">Level 1</MudSelectItem>
            <MudSelectItem T="int" Value="2">Level 2</MudSelectItem>
            <MudSelectItem T="int" Value="3">Level 3</MudSelectItem>
            <MudSelectItem T="int" Value="4">Level 4</MudSelectItem>
            <MudSelectItem T="int" Value="5">Level 5</MudSelectItem>
            <MudSelectItem T="int" Value="6">Level 6</MudSelectItem>
            <MudSelectItem T="int" Value="7">Level 7</MudSelectItem>
        </MudSelect>


        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(_stockfishActivated)" @onclick="PlayStockfish">Play</MudButton>
        <MudRadioGroup @bind-SelectedOption="_isWhiteSide" T="bool">
            <MudRadio T="bool" Color="Color.Default" Option="true">White</MudRadio>
            <MudRadio T="bool" Color="Color.Dark" Option="false">Black</MudRadio>
        </MudRadioGroup>
        <MudNumericField T="ulong" @bind-Value="_gameRoomInt" Label="Room id" Variant="Variant.Text" Min="0"/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="JoinGame">Join</MudButton>
        <MudTextField T="string" Label="Opponent" Required="true" RequiredError="User name is required!" @bind-Value="_opponent"/>
        <MudNumericField T="uint" @bind-Value="_timeControlBase" Label="Base time" Variant="Variant.Filled" Min="60"/>
        <MudNumericField T="uint" @bind-Value="_timeControlIncrement" Label="Increment time" Variant="Variant.Filled" Min="0"/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="CreateGame">Create game</MudButton>
    </MudItem>

</MudPaper>

@code {
    
    
    private Game.GameClient _client;
    private readonly IPosition _position = new Position(new Board(), new PieceValue());

    private int _selectedLevel = 1;
    private bool _stockfishActivated;

    private bool _isWhiteSide = true;
    private ulong _gameRoomInt = 0;

    private double _whiteSeconds;
    private double _blackSeconds;

    private string _opponent = "StockfishAi";

    private bool _whiteTimerActive = true;
    private uint _timeControlBase = 60, _timeControlIncrement = 0;

    private bool _isDrawOfferPending = false;
    
    protected override void OnInitialized()
    {
        _client = new Game.GameClient(Channel);
    }
    

    
    
    private async Task CreateGame()
    {
        ClaimsPrincipal user = await AuthService.GetAuthAsync();
        var isLoggedIn = user.Identity != null;

        if (!isLoggedIn) return;

        _whiteSeconds = _timeControlBase;
        _blackSeconds = _timeControlBase;
        var responseGame = await _client.StartGameAsync(new RequestGame()
        {
            GameType = "AI",
            Increment = _timeControlIncrement,
            IsWhite = _isWhiteSide,
            Opponent = _opponent,
            Seconds = _timeControlBase,
            Username = user.Identity!.Name!
        });
        _gameRoomInt = responseGame.GameRoom;
    }

        
    public void PlayStockfish()
    {
        if (_selectedLevel is > 0 and < 9)
            _stockfishActivated = true;
    }
     private async Task JoinGame()
    {
        var call = _client.JoinGame(new RequestJoinGame()
        {
            GameRoom = _gameRoomInt,
            Username = "Bob"
        });

        while (await call.ResponseStream.MoveNext(CancellationToken.None))
        {
            var message = call.ResponseStream.Current;
            Console.WriteLine("Event: " + message.Event);
        }

            StateHasChanged();
        }
    }
    

    
    
    
}